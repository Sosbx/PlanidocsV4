import { getMessaging, getToken, onMessage } from "firebase/messaging";
import { app } from "./config";

// Initialiser Firebase Cloud Messaging
export const messaging = typeof window !== 'undefined' ? getMessaging(app) : null;

// Fonction pour attendre l'activation compl√®te du service worker
const waitForServiceWorkerActivation = async (registration: ServiceWorkerRegistration): Promise<boolean> => {
  return new Promise((resolve) => {
    const checkState = () => {
      const sw = registration.active || registration.waiting || registration.installing;
      
      if (registration.active) {
        console.log('‚úÖ Service Worker actif et pr√™t');
        resolve(true);
        return;
      }
      
      if (sw) {
        console.log(`‚è≥ Service Worker en cours: ${sw.state}`);
        sw.addEventListener('statechange', function onStateChange() {
          console.log(`üîÑ Changement d'√©tat du SW: ${sw.state}`);
          if (sw.state === 'activated') {
            sw.removeEventListener('statechange', onStateChange);
            console.log('‚úÖ Service Worker activ√© apr√®s attente');
            resolve(true);
          }
        });
      } else {
        console.warn('‚ö†Ô∏è Aucun Service Worker trouv√©');
        resolve(false);
      }
    };
    
    checkState();
  });
};

// Fonction pour enregistrer le service worker avec activation garantie
const registerServiceWorker = async (): Promise<ServiceWorkerRegistration | null> => {
  try {
    if (!('serviceWorker' in navigator)) {
      console.log('‚ùå Service Worker non support√© dans ce navigateur');
      return null;
    }

    console.log('üîß D√©but de l\'enregistrement du Service Worker...');
    
    // V√©rifier si un service worker est d√©j√† enregistr√©
    const existingRegistration = await navigator.serviceWorker.getRegistration('/');
    
    if (existingRegistration) {
      console.log('üîÑ Service Worker d√©j√† enregistr√©, v√©rification de l\'√©tat...');
      
      // Attendre l'activation si n√©cessaire
      const isActive = await waitForServiceWorkerActivation(existingRegistration);
      
      if (isActive) {
        return existingRegistration;
      } else {
        console.log('üîÑ R√©-enregistrement du Service Worker...');
        await existingRegistration.unregister();
      }
    }
    
    // Enregistrer le nouveau service worker
    const registration = await navigator.serviceWorker.register('/firebase-messaging-sw.js', {
      scope: '/',
      updateViaCache: 'none' // Force la mise √† jour du SW
    });
    
    console.log('üì¶ Service Worker enregistr√©, scope:', registration.scope);
    
    // Attendre l'activation compl√®te
    const isActivated = await waitForServiceWorkerActivation(registration);
    
    if (!isActivated) {
      // Forcer la mise √† jour si n√©cessaire
      await registration.update();
      await waitForServiceWorkerActivation(registration);
    }
    
    // V√©rifier une derni√®re fois
    if (registration.active) {
      console.log('‚úÖ Service Worker compl√®tement actif');
      console.log('   State:', registration.active.state);
      console.log('   Script URL:', registration.active.scriptURL);
      return registration;
    } else {
      console.error('‚ùå Service Worker non actif apr√®s toutes les tentatives');
      return null;
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'enregistrement du Service Worker:', error);
    return null;
  }
};

// Fonction pour obtenir le token FCM avec retry
const getTokenWithRetry = async (
  swRegistration: ServiceWorkerRegistration,
  maxRetries: number = 3
): Promise<string | null> => {
  let lastError: any = null;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üîÑ Tentative ${attempt}/${maxRetries} d'obtention du token FCM...`);
      
      // V√©rifier que le SW est toujours actif
      if (!swRegistration.active) {
        console.log('‚è≥ Attente de l\'activation du Service Worker...');
        await waitForServiceWorkerActivation(swRegistration);
      }
      
      // Petit d√©lai pour s'assurer que tout est pr√™t
      if (attempt > 1) {
        const delay = attempt * 1000; // D√©lai progressif
        console.log(`‚è±Ô∏è Attente de ${delay}ms avant la tentative...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
      
      // Tenter d'obtenir le token
      const token = await getToken(messaging, {
        vapidKey: "BMRQROKtx98URmi7ZrQ35M_kY0WnVm3JcGnR36ljC8V9PhIEAUGjzseCqvhj4Qag7qwMgsyLgWEJYMAY2viymxI",
        serviceWorkerRegistration: swRegistration
      });
      
      if (token) {
        console.log(`‚úÖ Token FCM obtenu au tentative ${attempt}`);
        return token;
      }
    } catch (error: any) {
      lastError = error;
      console.warn(`‚ö†Ô∏è Tentative ${attempt} √©chou√©e:`, error.message);
      
      // Si c'est une erreur "no active Service Worker", r√©essayer
      if (error.message?.includes('no active Service Worker')) {
        console.log('üîÑ R√©activation du Service Worker...');
        await swRegistration.update();
        await waitForServiceWorkerActivation(swRegistration);
      }
    }
  }
  
  // Toutes les tentatives ont √©chou√©
  throw lastError || new Error('Impossible d\'obtenir le token FCM apr√®s plusieurs tentatives');
};

// Demander la permission et obtenir le token FCM
export const requestNotificationPermission = async (): Promise<string | null> => {
  try {
    console.log('üîî === D√©but de la demande de permission pour les notifications ===');
    
    // V√©rifier si le navigateur supporte les notifications
    if (typeof window === 'undefined' || !("Notification" in window) || !messaging) {
      console.log("‚ùå Ce navigateur ne prend pas en charge les notifications");
      return null;
    }

    // V√©rifier le contexte s√©curis√© (HTTPS ou localhost)
    if (!window.isSecureContext) {
      console.error('‚ùå Les notifications n√©cessitent HTTPS ou localhost');
      return null;
    }

    console.log('üîê Contexte s√©curis√© confirm√©');

    // Enregistrer et activer le service worker
    const swRegistration = await registerServiceWorker();
    if (!swRegistration) {
      console.error('‚ùå Impossible d\'enregistrer le service worker');
      return null;
    }

    // Demander la permission si n√©cessaire
    let permission = Notification.permission;
    console.log(`üí¨ Permission actuelle: ${permission}`);
    
    if (permission === 'default') {
      console.log('üôè Demande de permission √† l\'utilisateur...');
      permission = await Notification.requestPermission();
      console.log(`üë§ R√©ponse de l'utilisateur: ${permission}`);
    }
    
    if (permission !== "granted") {
      console.log("‚ùå Permission de notification refus√©e par l'utilisateur");
      return null;
    }
    
    console.log('‚úÖ Permission accord√©e, obtention du token FCM...');
    
    // Obtenir le token FCM avec retry
    const token = await getTokenWithRetry(swRegistration);
    
    if (token) {
      console.log("‚úÖ === Token FCM obtenu avec succ√®s ===");
      console.log("   Token (extrait):", token.substring(0, 20) + '...');
      return token;
    } else {
      console.log("‚ùå Impossible d'obtenir le token FCM");
      return null;
    }
  } catch (error: any) {
    console.error("‚ùå === Erreur lors de la demande de permission ===", error);
    
    // Logs d√©taill√©s pour l'erreur
    if (error.code) {
      console.error('üî¢ Code d\'erreur:', error.code);
    }
    if (error.message) {
      console.error('üí¨ Message d\'erreur:', error.message);
    }
    
    // Erreurs sp√©cifiques FCM
    if (error.code === 'messaging/registration-token-not-registered') {
      console.error('üîÑ Le token FCM n\'est pas enregistr√©. R√©essayez.');
    } else if (error.code === 'messaging/invalid-vapid-key') {
      console.error('üîë Cl√© VAPID invalide. V√©rifiez la configuration Firebase.');
    } else if (error.code === 'messaging/permission-blocked') {
      console.error('üö´ Les notifications sont bloqu√©es dans le navigateur.');
    } else if (error.message?.includes('no active Service Worker')) {
      console.error('üë∑ Service Worker non actif. Rechargez la page.');
    }
    
    return null;
  }
};

// √âcouter les messages FCM en premier plan
export const onMessageListener = () => {
  if (!messaging) return Promise.resolve(null);
  
  return new Promise((resolve) => {
    onMessage(messaging, (payload) => {
      resolve(payload);
    });
  });
};

// Formater les messages de notification
export const formatNotificationMessage = (type: string, data: any) => {
  switch (type) {
    case 'desiderata_reminder':
      return {
        title: "Rappel : Validation des d√©siderata",
        body: `N'oubliez pas de valider vos d√©siderata avant le ${data.deadline}. Votre participation est essentielle pour la cr√©ation du planning.`
      };
    case 'exchange_proposed':
      return {
        title: "Nouvelle proposition d'√©change",
        body: `${data.proposerName} vous propose un √©change pour votre garde du ${data.shiftDate} (${data.shiftPeriod})`
      };
    case 'exchange_accepted':
      return {
        title: "Proposition d'√©change accept√©e",
        body: `${data.accepterName} a accept√© votre proposition d'√©change pour la garde du ${data.shiftDate} (${data.shiftPeriod})`
      };
    case 'give_proposed':
      return {
        title: "Nouvelle proposition de cession",
        body: `${data.proposerName} vous propose de reprendre sa garde du ${data.shiftDate} (${data.shiftPeriod})`
      };
    case 'give_accepted':
      return {
        title: "Proposition de cession accept√©e",
        body: `${data.accepterName} a accept√© votre proposition de cession pour la garde du ${data.shiftDate} (${data.shiftPeriod})`
      };
    case 'replacement_proposed':
      return {
        title: "Nouvelle proposition de remplacement",
        body: `${data.proposerName} vous propose un remplacement pour la garde du ${data.shiftDate} (${data.shiftPeriod})`
      };
    default:
      return {
        title: "Nouvelle notification",
        body: "Vous avez re√ßu une nouvelle notification dans l'application PlaniDocs."
      };
  }
};
