/**
 * Utilitaire de diagnostic pour les notifications push
 * Aide √† identifier les probl√®mes de configuration FCM
 */

export const runNotificationDiagnostic = async () => {
  console.log('========================================');
  console.log('üîç Diagnostic des notifications push');
  console.log('========================================');
  
  const results: Record<string, any> = {};
  
  // 1. V√©rifier le support des notifications
  if ('Notification' in window) {
    results.notificationSupport = true;
    console.log('‚úÖ Les notifications sont support√©es');
  } else {
    results.notificationSupport = false;
    console.log('‚ùå Les notifications ne sont pas support√©es');
    return results;
  }
  
  // 2. V√©rifier la permission actuelle
  results.currentPermission = Notification.permission;
  console.log(`üìã Permission actuelle: ${Notification.permission}`);
  
  // 3. V√©rifier le support des Service Workers
  if ('serviceWorker' in navigator) {
    results.serviceWorkerSupport = true;
    console.log('‚úÖ Les Service Workers sont support√©s');
    
    // 4. V√©rifier les Service Workers enregistr√©s
    try {
      const registrations = await navigator.serviceWorker.getRegistrations();
      results.serviceWorkerRegistrations = registrations.length;
      console.log(`üì¶ Service Workers enregistr√©s: ${registrations.length}`);
      
      registrations.forEach((reg, index) => {
        console.log(`  ${index + 1}. Scope: ${reg.scope}`);
        console.log(`     Active: ${reg.active ? 'Oui' : 'Non'}`);
        console.log(`     Waiting: ${reg.waiting ? 'Oui' : 'Non'}`);
        console.log(`     Installing: ${reg.installing ? 'Oui' : 'Non'}`);
      });
      
      // Chercher sp√©cifiquement notre service worker Firebase
      const firebaseSwReg = registrations.find(reg => 
        reg.scope.includes(window.location.origin) || 
        reg.active?.scriptURL.includes('firebase-messaging-sw')
      );
      
      if (firebaseSwReg) {
        results.firebaseServiceWorker = true;
        console.log('‚úÖ Service Worker Firebase trouv√©');
      } else {
        results.firebaseServiceWorker = false;
        console.log('‚ö†Ô∏è Service Worker Firebase non trouv√©');
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification des Service Workers:', error);
      results.serviceWorkerError = error;
    }
  } else {
    results.serviceWorkerSupport = false;
    console.log('‚ùå Les Service Workers ne sont pas support√©s');
  }
  
  // 5. V√©rifier HTTPS/localhost
  const isSecureContext = window.isSecureContext;
  results.secureContext = isSecureContext;
  if (isSecureContext) {
    console.log('‚úÖ Contexte s√©curis√© (HTTPS ou localhost)');
  } else {
    console.log('‚ùå Contexte non s√©curis√© - les notifications n√©cessitent HTTPS');
  }
  
  // 6. V√©rifier la configuration Firebase
  try {
    const { app } = await import('../lib/firebase/config');
    if (app) {
      results.firebaseApp = true;
      console.log('‚úÖ Firebase App initialis√©e');
      console.log(`   Project ID: ${app.options.projectId}`);
      console.log(`   App ID: ${app.options.appId}`);
    }
  } catch (error) {
    results.firebaseApp = false;
    console.log('‚ùå Erreur avec Firebase App:', error);
  }
  
  // 7. V√©rifier Firebase Messaging
  try {
    const { messaging } = await import('../lib/firebase/messaging');
    if (messaging) {
      results.firebaseMessaging = true;
      console.log('‚úÖ Firebase Messaging initialis√©');
    } else {
      results.firebaseMessaging = false;
      console.log('‚ùå Firebase Messaging non initialis√©');
    }
  } catch (error) {
    results.firebaseMessaging = false;
    console.log('‚ùå Erreur avec Firebase Messaging:', error);
  }
  
  // 8. V√©rifier la cl√© VAPID
  results.vapidKey = 'BMRQROKtx98URmi7ZrQ35M_kY0WnVm3JcGnR36ljC8V9PhIEAUGjzseCqvhj4Qag7qwMgsyLgWEJYMAY2viymxI';
  console.log('üîë Cl√© VAPID configur√©e');
  
  // 9. V√©rifier le navigateur et la version
  const userAgent = navigator.userAgent;
  results.userAgent = userAgent;
  console.log(`üåê Navigateur: ${userAgent}`);
  
  // D√©tecter le type de navigateur
  if (userAgent.includes('Chrome')) {
    results.browser = 'Chrome';
  } else if (userAgent.includes('Firefox')) {
    results.browser = 'Firefox';
  } else if (userAgent.includes('Safari')) {
    results.browser = 'Safari';
  } else if (userAgent.includes('Edge')) {
    results.browser = 'Edge';
  } else {
    results.browser = 'Autre';
  }
  
  // 10. Recommandations
  console.log('\nüìå Recommandations:');
  
  if (!results.secureContext) {
    console.log('   ‚ö†Ô∏è Utilisez HTTPS pour les notifications');
  }
  
  if (results.currentPermission === 'denied') {
    console.log('   ‚ö†Ô∏è Les notifications sont bloqu√©es. R√©initialisez les permissions dans les param√®tres du navigateur');
  }
  
  if (!results.firebaseServiceWorker) {
    console.log('   ‚ö†Ô∏è Enregistrez le Service Worker Firebase en rechargeant la page');
  }
  
  if (results.browser === 'Safari') {
    console.log('   ‚ö†Ô∏è Safari a des limitations avec les Web Push. Assurez-vous d\'utiliser macOS 13+ ou iOS 16.4+');
  }
  
  console.log('========================================');
  console.log('Diagnostic termin√©. R√©sultats:', results);
  console.log('========================================');
  
  return results;
};

// Fonction pour tester manuellement l'enregistrement du service worker
export const testServiceWorkerRegistration = async () => {
  console.log('üß™ Test d\'enregistrement du Service Worker...');
  
  try {
    // D√©sinscrire tous les service workers existants
    const registrations = await navigator.serviceWorker.getRegistrations();
    for (const registration of registrations) {
      await registration.unregister();
      console.log(`üóëÔ∏è Service Worker d√©sinscrit: ${registration.scope}`);
    }
    
    // Attendre un peu
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // R√©enregistrer le service worker
    const registration = await navigator.serviceWorker.register('/firebase-messaging-sw.js', {
      scope: '/'
    });
    
    console.log('‚úÖ Service Worker enregistr√© avec succ√®s');
    console.log('   Scope:', registration.scope);
    
    // Attendre l'activation
    await navigator.serviceWorker.ready;
    console.log('‚úÖ Service Worker pr√™t et actif');
    
    return registration;
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'enregistrement:', error);
    throw error;
  }
};

// Exporter pour utilisation dans la console
if (typeof window !== 'undefined') {
  (window as any).notificationDiagnostic = {
    run: runNotificationDiagnostic,
    testSW: testServiceWorkerRegistration
  };
  
  console.log('üîß Outils de diagnostic des notifications charg√©s');
  console.log('   Utilisez: notificationDiagnostic.run() pour lancer le diagnostic');
  console.log('   Utilisez: notificationDiagnostic.testSW() pour tester le Service Worker');
}