import { sendDesiderataReminderPushNotification } from '../lib/firebase/pushNotifications';
import { requestNotificationPermission } from '../lib/firebase/messaging';
import { saveDeviceToken } from '../lib/firebase/deviceTokens';
import { createParisDate } from './timezoneUtils';

/**
 * Script de test pour v√©rifier le syst√®me de notifications
 * √Ä ex√©cuter depuis la console du navigateur apr√®s connexion
 */
export const testNotificationSystem = async () => {
  console.log('üß™ D√©but du test du syst√®me de notifications');
  
  try {
    // 1. V√©rifier le support des notifications
    if (!('Notification' in window)) {
      console.error('‚ùå Les notifications ne sont pas support√©es par ce navigateur');
      return false;
    }
    console.log('‚úÖ Support des notifications d√©tect√©');
    
    // 2. V√©rifier la permission actuelle
    const currentPermission = Notification.permission;
    console.log(`üìã Permission actuelle: ${currentPermission}`);
    
    // 3. Demander la permission si n√©cessaire
    if (currentPermission !== 'granted') {
      console.log('üîî Demande de permission...');
      const token = await requestNotificationPermission();
      
      if (!token) {
        console.error('‚ùå Permission refus√©e ou erreur lors de l\'obtention du token');
        return false;
      }
      
      console.log(`‚úÖ Token FCM obtenu: ${token.substring(0, 30)}...`);
      
      // Sauvegarder le token (remplacer USER_ID par l'ID r√©el)
      const userId = (window as any).currentUserId || 'test-user';
      await saveDeviceToken(userId, token);
      console.log('‚úÖ Token enregistr√© dans Firestore');
    }
    
    // 4. Tester l'envoi d'une notification locale
    console.log('üì® Test de notification locale...');
    const notification = new Notification('Test Planidocs', {
      body: 'Ceci est une notification de test',
      icon: '/favicon.ico',
      badge: '/badge-icon.png',
      requireInteraction: true,
      vibrate: [200, 100, 200]
    });
    
    notification.onclick = () => {
      console.log('‚úÖ Clic sur la notification d√©tect√©');
      window.focus();
      notification.close();
    };
    
    // 5. Tester l'envoi via Firebase (n√©cessite un utilisateur connect√©)
    const currentUser = (window as any).currentUser;
    if (currentUser) {
      console.log('üöÄ Test d\'envoi via Firebase...');
      const deadline = new Date();
      deadline.setDate(deadline.getDate() + 7);
      
      try {
        await sendDesiderataReminderPushNotification(currentUser.id, deadline);
        console.log('‚úÖ Notification push envoy√©e via Firebase');
      } catch (error) {
        console.error('‚ùå Erreur lors de l\'envoi via Firebase:', error);
      }
    } else {
      console.warn('‚ö†Ô∏è Aucun utilisateur connect√© - impossible de tester l\'envoi Firebase');
    }
    
    console.log('‚ú® Test termin√© avec succ√®s');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur durant le test:', error);
    return false;
  }
};

/**
 * V√©rifie l'√©tat actuel du syst√®me de notifications
 */
export const checkNotificationStatus = () => {
  const status = {
    browserSupport: 'Notification' in window,
    permission: 'Notification' in window ? Notification.permission : 'unsupported',
    serviceWorker: 'serviceWorker' in navigator,
    fcmToken: localStorage.getItem('fcm_token'),
    bannierDismissed: localStorage.getItem('notification_banner_dismissed'),
    deniedDismissed: localStorage.getItem('notification_denied_dismissed')
  };
  
  console.table(status);
  
  // Recommandations
  console.log('\nüìä Recommandations:');
  
  if (!status.browserSupport) {
    console.log('‚ùå Navigateur incompatible - utilisez Chrome, Firefox ou Safari');
  } else if (status.permission === 'denied') {
    console.log('‚ö†Ô∏è Notifications bloqu√©es - d√©bloquez-les dans les param√®tres du navigateur');
  } else if (status.permission === 'default') {
    console.log('üí° Notifications non configur√©es - appelez testNotificationSystem()');
  } else if (!status.fcmToken) {
    console.log('‚ö†Ô∏è Pas de token FCM - reconnectez-vous ou appelez testNotificationSystem()');
  } else {
    console.log('‚úÖ Syst√®me de notifications op√©rationnel');
  }
  
  return status;
};

// Exposer les fonctions globalement pour les tests
if (typeof window !== 'undefined') {
  (window as any).testNotifications = {
    test: testNotificationSystem,
    checkStatus: checkNotificationStatus
  };
  
  console.log('üîß Fonctions de test disponibles:');
  console.log('- testNotifications.test() : Lance le test complet');
  console.log('- testNotifications.checkStatus() : V√©rifie l\'√©tat actuel');
}