import { useCallback, useRef } from 'react';

/**
 * Hook pour cr√©er une fonction debounced qui emp√™che les appels multiples rapides
 * Particuli√®rement utile pour pr√©venir les doubles soumissions
 * 
 * @param callback - La fonction √† d√©bouncer
 * @param delay - Le d√©lai en millisecondes (par d√©faut 1000ms)
 * @returns Une version d√©bounc√©e de la fonction
 */
export function useDebounce<T extends (...args: any[]) => any>(
  callback: T,
  delay: number = 1000
): (...args: Parameters<T>) => void {
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  const isExecutingRef = useRef(false);

  return useCallback(
    (...args: Parameters<T>) => {
      // Si une ex√©cution est d√©j√† en cours, on ignore l'appel
      if (isExecutingRef.current) {
        console.log('üîí Action d√©j√† en cours, appel ignor√©');
        return;
      }

      // Annuler le timeout pr√©c√©dent s'il existe
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }

      // Marquer comme en cours d'ex√©cution
      isExecutingRef.current = true;

      // Ex√©cuter imm√©diatement la fonction
      callback(...args);

      // R√©initialiser le flag apr√®s le d√©lai
      timeoutRef.current = setTimeout(() => {
        isExecutingRef.current = false;
      }, delay);
    },
    [callback, delay]
  );
}

/**
 * Hook pour cr√©er une fonction debounced avec Promise
 * Utile pour les op√©rations asynchrones comme les appels API
 * 
 * @param callback - La fonction asynchrone √† d√©bouncer
 * @param delay - Le d√©lai en millisecondes (par d√©faut 1000ms)
 * @returns Une version d√©bounc√©e de la fonction qui retourne une Promise
 */
export function useDebounceAsync<T extends (...args: any[]) => Promise<any>>(
  callback: T,
  delay: number = 1000
): (...args: Parameters<T>) => Promise<ReturnType<T> | undefined> {
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  const isExecutingRef = useRef(false);

  return useCallback(
    async (...args: Parameters<T>): Promise<ReturnType<T> | undefined> => {
      // Si une ex√©cution est d√©j√† en cours, on retourne undefined
      if (isExecutingRef.current) {
        console.log('üîí Action asynchrone d√©j√† en cours, appel ignor√©');
        return undefined;
      }

      // Annuler le timeout pr√©c√©dent s'il existe
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }

      // Marquer comme en cours d'ex√©cution
      isExecutingRef.current = true;

      try {
        // Ex√©cuter la fonction asynchrone
        const result = await callback(...args);
        
        // R√©initialiser le flag apr√®s le d√©lai
        timeoutRef.current = setTimeout(() => {
          isExecutingRef.current = false;
        }, delay);

        return result;
      } catch (error) {
        // En cas d'erreur, r√©initialiser imm√©diatement
        isExecutingRef.current = false;
        throw error;
      }
    },
    [callback, delay]
  );
}